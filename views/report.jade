doctype html
html
  head
    meta(charset="utf-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0, user-scalable=false")
    link(rel="shortcut icon", href="../imgs/pin.ico")
    title  Find Me | Final Report 
    // CSS Styles
    link(rel="stylesheet", type="text/css", href="css/index.css")
    link(rel="stylesheet", type="text/css", href="css/report.css")
    // Fonts
    link(href="http://fonts.googleapis.com/css?family=Open+Sans:700,400", rel="stylesheet", type="text/css")
    // Scripts
    script(src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js")
  body
    nav
      ul
        li
          a(href="/meet") Meet
        li
          a(href="/games") Games
        li
          a(href="/settings") Settings
        li
          a(href="/schedule") Schedule
    .content
      .text
        h3 The Problem
        | As social creatures we crave the company of others and lately in this hectic world it"s hard to catch some quality time with friends in the real world. When you do manage to grab a time slot a lot of time is wasted figuring out the
        b logistics
        | of where to meet, how to get there, and all the other details.
        h3 Idea
        | Find Me is a web application built for all wi-fi devices that
        b facilitates meet-ups
        | . Not only does it give users meeting place suggestions, it also shows real-time trajectory maps, calculates ETAs, gives access to a built-in chat, and incorporates fun geolocation games for users that are on-the-go. Find Me can also be used on the desktop to ensure that your loved ones get to where they need to go safely and with that grocery list on hand! Find Me is perfect for your next impromptu meeting.
        h3 Team Description
        .pic
          img(src="imgs/Ilya.png")
        .description
          ul
            li
              b Role:
              | Database, Meet, Chat, Cross Site Scripting, Friendlist and Invites
            li
              b Email:
              | ilya.samsonov90@gmail.com
            li
              b Bio: 
              | #15 on the varsity water-polo team
            li
              b Comments:
              | This course has required me to explore and study on my own, while collaborating and adjusting to work with others. I have learned to use some web development tools, such as HTML, CSS, JavaScript, jQuery and Nodejs while furthering my knowledge in other tools, posrtgres and Git. Overall I found this to be a good hands on experience on group project and time management. 
        .pic
          img(src="imgs/lia.png")
        .description
          ul
            li
              b Role:
              | UI, Server, Authentication, Cookies, Hide and Seek, CSRF, Documentation
            li
              b Email:
              | citrus.smooth@gmail.com
            li
              b Bio:
              | Full time cat lady
            li
              b Comments:
              | This summer course has allowed me to experiment with various aspects of web development and new web technologies. I have become quite familiar with how to develop both static and dynamic websites using node.js, express, and jquery. I have learned security practices for user authentication to protect against cross site request forgery and dictionary attacks.
        .pic
          img(src="imgs/amit.png")
        .description
          ul
            li
              b Role: 
              | Scavenger, Performance
            li
              b Email:
              | amit.pra94@gmail.com
            li
              b Bio:
              | Car enthusiast
            li
              b Comments:
              | This course has taught me all the basics things I need to know for making a website. From backend-end development including database, security to front-end designing and development. I learned new web technologies such as node.js, express and jquery. I got to work collaboratively on a good project with cooperative team mates.
        .pic
          img(src="imgs/vera.png")
        .description
          ul
            li
              b Role:
              | Register, Themes, Settings, Future Meetings, FutureInvites, Submissions, Security
            li
              b Email:
              | verarizvi@gmail.com
            li
              b Bio: 
              | IBM corp. employee
            li
              b Comments:
              | I started as a novice web developer this summer and I am walking out with good knowledge of web development and new web technologies. This course has taught me how to develop both static and dynamic websites using HTML, CSS, Javascript, node.js, express and JQuery. I have learned how to make responsive and secure websites, protect them against cross site request forgery and dictionary attacks. Through this experience my existing knowledge for postgres and Github extended and I got the opportunity to work as a front-end and back-end developer with a good team.
        .pic
          img(src="imgs/will.png")
        .description
          ul
            li
              b Role:
              | Manhunt, Picture Upload
            li
              b Email:
              | willzard.zhang@gmail.com
            li
              b Bio:
              | Hobbyist stage magician
            li
              b Comments:
              | what i’ve learned: from a design/management perseptive: the importance, difficulties, and necessity of ux, it is almost impossible to get a precise estimation of the time needs to spend on certain features.technical point of view: I’ve learned how to use html/css/javascript very well, using libraries in JQuery in conjunction with javascript, data retrieval and processing with node.js, data manipulation in JQuery with node.js, process http requests with node.js and express.js, SQL with postgres, NoSQL with mongodb, combat csrf attacks with csrf node module
        .text
          h3 Code
          ul
            li
              a(href="https://github.com/MissCatLady/CSC309") Github Repository
          h3 Project Development Roadmap
          ul
            li
              a(href="https://docs.google.com/document/d/1HM1IG6YxAGAjJhtany6x6GLPsQmztT2Yu_FEKMdgpzg/edit?usp=sharing") Product Backlog
            li
              a(href="https://docs.google.com/document/d/1fTezIbswBd4bkaSgBrV1Bayw4mo_lZdd3CPPX3qrWng/edit?usp=sharing") A1 Sprint Backlog
            li
              a(href="https://docs.google.com/document/d/1EIsM4FmIwuSn60pV0ThQJUIUN4CbZVj9PjqlSPngGFU/edit?usp=sharing") A2 Sprint Backlog
            li
              a(href="https://docs.google.com/document/d/1pyZCNN0C7-4phtnUPqRjkn3rdUbTUJm-NMbDHI9jgxc/edit?usp=sharing") A3 Sprint Backlog
          h3  A3 Tasks 
          ul
            li Authentication Security - Owner: Lia
            li SQL Injection Protection - Owner: Everyone
            li Performance and Scaling - Owner: Amit
            li Cross-Site Scripting Prevention (XSS) - Owner: Ilya
            li Cross-Site Request Forgery (CSRF) - Owner: Lia, Vera, Will, Ilya
            li Games Functionality Extension - Owner: Will
            li Documentation - Owner:Lia, Vera
          h3 Security Report
          ul
            li
              b Password Hashing and Salting
              | - Passwords are salted with the user"s date of registration and hashed with
              a(href="http://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm") Node.js crypto module
              | using SHA-1 as the hash function. The hashing occurs on the server side and is kept in our database.
            p
            li
              b Captchas
              | -
              a(href="https://www.google.com/recaptcha/intro/index.html") Google"s ReCaptcha
              | API is used with
              a(href="https://www.npmjs.org/package/recaptcha") Node.js recaptcha middleware
              | to implement human verification after 1 unsuccessful login. User is verified when both the password and the captcha is correct for the specified e-mail address.
            p
            li
              b Prepared Statements
              | - We use
              a(href="https://github.com/brianc/node-postgres") Node.js postgres module
              | and its prepared statements to send database queries.
              a(href="https://github.com/brianc/node-postgres/wiki/Prepared-Statements") Parameterized queries 
              | prevent SQL Injections.
            p
            li
              b Cross-Site Scripting (XSS)
              | - To prevent XXS type attacks we have disallowed certain characters from our forms when users are entering input. Additionally in our chat box we have used
              a(href="https://www.npmjs.org/package/sanitizer") Node.js sanitizer module
            | to validate user input and strip all html tags from the message. Our cookies that are with the
            a(href="https://www.npmjs.org/package/cookies") cookies module
            | are HTTP-only by default.
            p
            li
              b Cross-site Request Forgery (CSRF)
              | - To prevent CSRF type attacks we have used
              a(href="https://www.npmjs.org/package/csurf") Node.js token middleware
              | to validate that all GET/POST requests from the client are sent from valid sources. The middleware generates its own tokens and validates them appropriately. When the token is invalid the user is given an error page.
          h3 Performance Report
          ul
            li
              a(href="imgs/loadana.png")
                img.blog_pic(src="imgs/loadana.png", width="100%")
            li
              b Load Test
              | - To load test our app we used a Heroku add-on called Blitz. The load test ran for 60 seconds in which every 5 seconds 12.5 users where added to a pool of users that were accessing our app with a total of 250 users at the 60 second mark. We were able to produce an average of 117 hits/second with a 99.48% success rate and only 34 out of our total 6464 hits resulting in a timeout. We also had mostly consistent response times among our users with an average response time of 35ms peaking at 167ms.
            li
              a(href="imgs/loadtest.png")
                img.blog_pic(src="imgs/loadtest.png", width="100%")
            li
              a(href="imgs/stressana.png")
                img.blog_pic(src="imgs/stressana.png", width="100%")
            li
              b Stress Test
              | -To stress test our app we also used Blitz. The stress test again ran for 60 seconds except this time we started with 250 users and maintained all of them throughout the duration of the test. We were able to produce an average of 233 hits/second with a 100% success rate over a total of 13401 hits. We also had mostly consistent response times among our users with an average response time of 69ms peaking at 330ms. Although the response time is longer in comparison to the load test its still reasonable.
            li
              a(href="imgs/stresstestgraph.png")
                img.blog_pic(src="imgs/stresstestgraph.png", width="100%")
            li
              a(href="imgs/dbtest.png")
                img.blog_pic(src="imgs/dbtest.png", width="100%")
            li
              b Database Testing
              | - We improved the response time of our database by only letting it close a connection if a user has not made a request for a period of time. By allowing a connection to remain open we significantly improve response time. The spikes in the graph are just the time it takes to connect to the database, which is still under 100ms, but after a connection is made and opened data retrieval is under 20 ms.
             li 
               b a(href="goo.gl/O64PT2") BONUS MARKS Testing Script
          h3 Project Limitations
          ul
            li
              | While we spent a lot of time thinking about how the user would interact with our website on a phone, tablet, and computer, we did not think about the user outside of our web application. There are no e-mails sent to the user when they register, so they have no record of registration. The user is also not able to retrieve his password when lost. In this way we have cut out the end user from our development process, and only created this application for our personal use. In the future if we"d like to bring our application to the public, account confirmation is essential, and we can look to the
              a(href="https://www.npmjs.org/package/nodemailer-noiconv") nodemailer module
              | to implement email confirmations. A password retrieval function can be implemented via e-mailed tokens with timed expiry that allows the user to change their password from their given email.
            p
            li
              | Linking accounts from 3rd party applications is also of convenience to the user, both Google and FB have API"s that allow easy account linking and creation. It is important to note that authentication happens on another site and because of this we would need to create CSRF exceptions for these third party sites.
            p
            li
              | Due to time constraints many medium and low priority tasks have not been completed. For example currently while a Hide and Seek game can be maintained throughout sessions, the history of a game is not saved. The point system does not exist for any games either. There are many similar features that we would have loved to implement, such as profile pictures in the chat box, but the time for this assignment was limited. Given more time many of the medium and lower priority tasks could have been implemented for trouble.
            p
    footer
      ul
        li
          a(href="/meet")  Meet
        li
          a(href="/games")  Games
        li
          a(href="/schedule") Schedule
        li
          a(href="/index") 2014 Find Me 
